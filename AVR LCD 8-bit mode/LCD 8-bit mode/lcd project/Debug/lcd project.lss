
lcd project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bf  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <cmd>:
	
    
}
void cmd(unsigned char cd)
{
	PORTB |= (1<<1); //E to 1
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	92 60       	ori	r25, 0x02	; 2
  70:	98 bb       	out	0x18, r25	; 24
	PORTB |=(1<<0); //RS to 1
  72:	98 b3       	in	r25, 0x18	; 24
  74:	91 60       	ori	r25, 0x01	; 1
  76:	98 bb       	out	0x18, r25	; 24
	PORTC = (PORTC & 0xF0) | (cd & 0x0F); // setting the hight nibble
  78:	95 b3       	in	r25, 0x15	; 21
  7a:	90 7f       	andi	r25, 0xF0	; 240
  7c:	28 2f       	mov	r18, r24
  7e:	2f 70       	andi	r18, 0x0F	; 15
  80:	92 2b       	or	r25, r18
  82:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	30 e7       	ldi	r19, 0x70	; 112
  88:	92 e0       	ldi	r25, 0x02	; 2
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <cmd+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <cmd+0x28>
  94:	00 00       	nop
	_delay_ms(50);
	PORTC = ( PORTC& 0x0F) | (cd << 0); // setting the low nibble
  96:	95 b3       	in	r25, 0x15	; 21
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	85 bb       	out	0x15, r24	; 21
	PORTB &=~(1<<0); //E to 0
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	08 95       	ret

000000a6 <ans>:
}
void ans(unsigned char as)
{
	PORTB |= (1<<1); //E to 1
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	92 60       	ori	r25, 0x02	; 2
  aa:	98 bb       	out	0x18, r25	; 24
	PORTB |=(1<<0); //RS to 1
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	91 60       	ori	r25, 0x01	; 1
  b0:	98 bb       	out	0x18, r25	; 24
	PORTC = (PORTC & 0xF0) | (as & 0x0F); // setting the hight nibble
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	28 2f       	mov	r18, r24
  b8:	2f 70       	andi	r18, 0x0F	; 15
  ba:	92 2b       	or	r25, r18
  bc:	95 bb       	out	0x15, r25	; 21
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	30 e7       	ldi	r19, 0x70	; 112
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <ans+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <ans+0x28>
  ce:	00 00       	nop
	_delay_ms(50);
	PORTC = ( PORTC& 0x0F) | (as << 0); // setting the low nibble
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	9f 70       	andi	r25, 0x0F	; 15
  d4:	89 2b       	or	r24, r25
  d6:	85 bb       	out	0x15, r24	; 21
	PORTB &=~(1<<0); //E to 0
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret

000000e0 <main>:
void cmd(unsigned char cd);
void ans(unsigned char as);

int main(void)
{
    DDRB=(0xFF); //for portb
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	DDRC=(0xFF); // for portc
  e4:	84 bb       	out	0x14, r24	; 20
	
	cmd(0x01);//clrscr
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	cmd(0x28);//16*2 4-bit mode
  ec:	88 e2       	ldi	r24, 0x28	; 40
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	cmd(0x0C); //display on cursor off
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	ans(0x43);
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <ans>
	
    
}
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
